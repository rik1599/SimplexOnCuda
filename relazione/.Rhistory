par(mfrow=c(1,2))
scatter3D(phaseOneFrame.mean$vars, phaseOneFrame.mean$constraints, phaseOneFrame.mean$values,
theta = -35, phi = 5, bty = "g",  type = "h",
pch = 19,
zlim = c(0, max(solvePhaseOne.mean)),
surface = TRUE, fill=TRUE, grid=TRUE, grid.lines=26,
xlab = "variabili", ylab = "vincoli", zlab = "tempo", main = "Fase 1")
scatter3D(phaseTwoFrame.mean$vars, phaseTwoFrame.mean$constraints, phaseTwoFrame.mean$values,
theta = -35, phi = 5, bty = "g",  type = "h",
pch = 19,
zlim = c(0, max(solvePhaseOne.mean)),
surface = TRUE, fill=TRUE, grid=TRUE, grid.lines=26,
xlab = "variabili", ylab = "vincoli", zlab = "tempo", main = "Fase 2")
par(mfrow=c(1,1))
fixedValue = 4096
phaseOneMean_FixVars <- subset(phaseOneFrame.mean, vars == fixedValue)
phaseTwoMean_FixVars <- subset(phaseTwoFrame.mean, vars == fixedValue)
phaseOneMean_FixConstraints <- subset(phaseOneFrame.mean, constraints == fixedValue)
phaseTwoMean_FixConstraints <- subset(phaseTwoFrame.mean, constraints == fixedValue)
par(mfrow=c(2,2))
plot(data = phaseOneMean_FixVars, values~constraints, type = 'b', main = paste("Fase 1, Vars: ",fixedValue))
plot(data = phaseTwoMean_FixVars, values~constraints, type = 'b', main = paste("Fase 2, Vars: ",fixedValue))
plot(data = phaseOneMean_FixConstraints, values~vars, type = 'b', main = paste("Fase 1, Constraints: ",fixedValue))
plot(data = phaseTwoMean_FixConstraints, values~vars, type = 'b', main = paste("Fase 2, Constraints: ",fixedValue))
par(mfrow=c(1,1))
library(plot3D)
#preparazione dataframes
vars <- c()
trueVarsPhaseOne <- c()
trueVarsPhaseTwo <- c()
constraints <- c()
solvePhaseOne.mean <- c()
solvePhaseOne.total <- c()
solvePhaseTwo.mean <- c()
solvePhaseTwo.total <- c()
values <- c(256, 512, 1024, 2048, 4096, 8192)
for(var in values){               ##usiamo un for per caricarli tutti
for(constraint in values){
constraints <- c(constraints, constraint)
vars <- c(vars, var)
##composizione nome file
temp1 <- format(var)
temp2 <- format(constraint)
fileLocation <- "./../data/measures/mx250_2/"    #sostituire con locazione desiderata
filename <- paste(fileLocation, "benchmark_", temp1, "_", temp2, ".txt", sep = "")
##lettura file
currentData <- read.csv(filename)
##isoliamo il tempo di solve per le diverse fasi
#fase 1
variables <- (var + 2*constraint) + 1
trueVarsPhaseOne <- c(trueVarsPhaseOne, variables)
tempData <- subset(currentData, vars == format(variables) & operation == "solve" )
solvePhaseOne.mean <- c(solvePhaseOne.mean, mean(tempData$elapsed_time))
solvePhaseOne.total <- c(solvePhaseOne.total, sum(tempData$elapsed_time))
#fase 2
variables <- (var + constraint) + 1
trueVarsPhaseTwo <- c(trueVarsPhaseTwo, variables)
tempData <- subset(currentData, vars == format(variables) & operation == "solve" )
solvePhaseTwo.mean <- c(solvePhaseTwo.mean, mean(tempData$elapsed_time))
solvePhaseTwo.total <- c(solvePhaseTwo.total, sum(tempData$elapsed_time))
}
}
names <- c("vars", "constraints", "trueVars", "values")
phaseOneFrame.mean<- data.frame(vars, constraints, trueVarsPhaseOne, solvePhaseOne.mean);
phaseOneFrame.total<- data.frame(vars, constraints, trueVarsPhaseOne, solvePhaseOne.total);
phaseTwoFrame.mean<- data.frame(vars, constraints, trueVarsPhaseTwo, solvePhaseTwo.mean);
phaseTwoFrame.total<- data.frame(vars, constraints, trueVarsPhaseTwo, solvePhaseTwo.total);
colnames(phaseOneFrame.mean) <- names;
colnames(phaseOneFrame.total) <- names;
colnames(phaseTwoFrame.mean) <- names;
colnames(phaseTwoFrame.total) <- names;
##dataframe pronti
#fittiamo un modello, opzionale eventualmente eliminare, non utilizzate per ora
phaseOneFrame.mean.lm <- lm(values ~ constraints + vars + 1, data = phaseOneFrame.mean)
phaseOneFrame.total.lm <- lm(values ~ constraints + vars + 1, data = phaseOneFrame.total)
phaseTwoFrame.mean.lm <- lm(values ~ constraints + vars + 1, data = phaseTwoFrame.mean)
phaseTwoFrame.total.lm <- lm(values ~ constraints + vars + 1, data = phaseTwoFrame.total)
##grafici 3d
## tempo medio per il ciclo di solve
par(mfrow=c(1,2))
scatter3D(phaseOneFrame.mean$trueVars, phaseOneFrame.mean$constraints, phaseOneFrame.mean$values,
theta = -35, phi = 5, bty = "g",  type = "h",
pch = 19,
zlim = c(0, max(solvePhaseOne.mean)),
surface = TRUE, fill=TRUE, grid=TRUE, grid.lines=26,
xlab = "variabili totali", ylab = "vincoli", zlab = "tempo", main = "Fase 1")
scatter3D(phaseTwoFrame.mean$trueVars, phaseTwoFrame.mean$constraints, phaseTwoFrame.mean$values,
theta = -35, phi = 5, bty = "g",  type = "h",
pch = 19,
zlim = c(0, max(solvePhaseOne.mean)),
surface = TRUE, fill=TRUE, grid=TRUE, grid.lines=26,
xlab = "variabili totali", ylab = "vincoli", zlab = "tempo", main = "Fase 2")
par(mfrow=c(1,1))
phaseOneMean_ElemNumber <- phaseOneFrame.mean
phaseTwoMean_ElemNumber <- phaseTwoFrame.mean
phaseOneMean_ElemNumber$cells <- phaseOneMean_ElemNumber$constraints * phaseOneMean_ElemNumber$trueVars
phaseTwoMean_ElemNumber$cells <- phaseTwoMean_ElemNumber$constraints * phaseTwoMean_ElemNumber$trueVars
linearModelPhaseOne <- lm(data = phaseOneMean_ElemNumber, values~cells)
linearModelPhaseTwo <- lm(data = phaseTwoMean_ElemNumber, values~cells)
par(mfrow=c(1,2))
plot(data = phaseOneMean_ElemNumber, values~cells, main = "Fase 1")
abline(linearModelPhaseOne, col = "green")
plot(data = phaseTwoMean_ElemNumber, values~cells, main = "Fase 2")
abline(linearModelPhaseTwo, col = "green")
par(mfrow=c(1,1))
mx250.means <- c()
rtx2070super.means <- c()
vars <- c()
constraints <- c()
trueVarsPhaseOne <- c()
values <- c(256, 512, 1024, 2048, 4096, 8192)
for(var in values){               ##usiamo un for per caricarli tutti
for(constraint in values){
constraints <- c(constraints, constraint)
vars <- c(vars, var)
#mx250
##composizione nome file
temp1 <- format(var)
temp2 <- format(constraint)
fileLocation <- "./../data/measures/mx250_2/"    #sostituire con locazione desiderata
filename <- paste(fileLocation, "benchmark_", temp1, "_", temp2, ".txt", sep = "")
##lettura file
variables <- (var + 2*constraint) + 1
currentData <- read.csv(filename)
currentData <- subset(currentData, vars == variables & operation == "solve")
mx250.means <- c(mx250.means, mean(currentData$elapsed_time))
#mx250
##composizione nome file
temp1 <- format(var)
temp2 <- format(constraint)
fileLocation <- "./../data/measures/rtx2070super/"    #sostituire con locazione desiderata
filename <- paste(fileLocation, "benchmark_", temp1, "_", temp2, ".txt", sep = "")
##lettura file
variables <- (var + 2*constraint) + 1
currentData <- read.csv(filename)
currentData <- subset(currentData, vars == variables & operation == "solve")
rtx2070super.means <- c(rtx2070super.means, mean(currentData$elapsed_time))
#altro
trueVarsPhaseOne <- c(trueVarsPhaseOne, variables)
}
}
names <- c("vars", "constraints", "trueVars", "values")
#creazione data frames
mx250.means <- data.frame(vars, constraints, trueVarsPhaseOne, mx250.means);
rtx2070super.means <- data.frame(vars, constraints, trueVarsPhaseOne, rtx2070super.means);
colnames(mx250.means) <- names;
colnames(rtx2070super.means) <- names;
mx250.means$cells <- mx250.means$constraints * mx250.means$trueVars
rtx2070super.means$cells <- rtx2070super.means$constraints * rtx2070super.means$trueVars
##inseriamo la linea di regressione
mx250.lm <- lm(data = mx250.means, values~cells)
rtx2070super.lm <- lm(data = rtx2070super.means, values~cells)
plot(data = mx250.means, values~cells, main = "Tempo medio per singolo ciclo di solve in fase 1", xlab = "numero di elementi del tableu", ylab = "Tempo per ciclo", col = "black")
points(data = rtx2070super.means, values~cells, col = "green")
abline(mx250.lm, col = "black")
abline(rtx2070super.lm, col = "green")
legend("topleft", c("mx250", "rtx 2070 super"), lty = c(1,1), col = c("black", "green"))
###roba vecchia
# mx250_1024 <- read.csv("./../data/measures/mx250/mx250_1024.txt")
# mx250_2048 <- read.csv("./../data/measures/mx250/mx250_2048.txt")
# mx250_4096 <- read.csv("./../data/measures/mx250/mx250_4096.txt")
# mx250_8192 <- read.csv("./../data/measures/mx250/mx250_8192.txt")
# rtx3070_1024 <- read.csv("./../data/measures/rtx3070/rtx3070_1024.txt")
# rtx3070_2048 <- read.csv("./../data/measures/rtx3070/rtx3070_2048.txt")
# rtx3070_4096 <- read.csv("./../data/measures/rtx3070/rtx3070_4096.txt")
# rtx3070_8192 <- read.csv("./../data/measures/rtx3070/rtx3070_8192.txt")
# times_mx250_1024 <- subset(mx250_1024, vars == "3073" & operation == "solve")
# times_mx250_2048 <- subset(mx250_2048, vars == "6145" & operation == "solve")
# times_mx250_4096 <- subset(mx250_4096, vars == "12289" & operation == "solve")
# times_mx250_8192 <- subset(mx250_8192, vars == "24577" & operation == "solve")
# times_rtx3070_1024 <- subset(rtx3070_1024, vars == "3073" & operation == "solve")
# times_rtx3070_2048 <- subset(rtx3070_2048, vars == "6145" & operation == "solve")
# times_rtx3070_4096 <- subset(rtx3070_4096, vars == "12289" & operation == "solve")
# times_rtx3070_8192 <- subset(rtx3070_8192, vars == "24577" & operation == "solve")
# ############ 1024 ##########
# dta_A <- mean(times_mx250_1024$elapsed_time)
# dta_B <- mean(times_rtx3070_1024$elapsed_time)
# mx250_Data <- dta_A
# rtx3070_Data <- dta_B
# ############ 2048 ##########
# dta_A <- mean(times_mx250_2048$elapsed_time)
# dta_B <- mean(times_rtx3070_2048$elapsed_time)
# mx250_Data <- c(mx250_Data, dta_A)
# rtx3070_Data <- c(rtx3070_Data, dta_B)
# ############ 4096 ##########
# dta_A <- mean(times_mx250_4096$elapsed_time)
# dta_B <- mean(times_rtx3070_4096$elapsed_time)
# mx250_Data <- c(mx250_Data, dta_A)
# rtx3070_Data <- c(rtx3070_Data, dta_B)
# ########### 8192 ###########
# dta_A <- mean(times_mx250_8192$elapsed_time)
# dta_B <- mean(times_rtx3070_8192$elapsed_time)
# mx250_Data <- c(mx250_Data, dta_A)
# rtx3070_Data <- c(rtx3070_Data, dta_B)
# #### preparazione dataframes ####
# edge <- c(1024,2048,4096,8192)
# mx250_Data <- data.frame(mx250_Data, edge)
# rtx3070_Data <- data.frame(rtx3070_Data, edge)
# colnames(mx250_Data) <- c("time", "edge")
# colnames(rtx3070_Data) <- c("time", "edge")
# plot(data = mx250_Data, time~edge, main = "Tempo per singolo ciclo di solve", type = 'b', xlab = "Dimensione lato matrice", ylab = "Tempo per ciclo", col = "black")
# lines(data = rtx3070_Data, time~edge, type = 'b', col = "green")
# legend("topleft", c("mx250", "rtx 3070"), lty = c(1,1), col = c("black", "green"))
mx250.means <- c()
rtx2070super.means <- c()
vars <- c()
constraints <- c()
trueVarsPhaseOne <- c()
values <- c(256, 512, 1024, 2048, 4096, 8192)
for(var in values){               ##usiamo un for per caricarli tutti
for(constraint in values){
constraints <- c(constraints, constraint)
vars <- c(vars, var)
#mx250
##composizione nome file
temp1 <- format(var)
temp2 <- format(constraint)
fileLocation <- "./../data/measures/mx250_2/"    #sostituire con locazione desiderata
filename <- paste(fileLocation, "benchmark_", temp1, "_", temp2, ".txt", sep = "")
##lettura file
variables <- (var + 2*constraint) + 1
currentData <- read.csv(filename)
currentData <- subset(currentData, vars == variables & operation == "solve")
mx250.means <- c(mx250.means, mean(currentData$elapsed_time))
#mx250
##composizione nome file
temp1 <- format(var)
temp2 <- format(constraint)
fileLocation <- "./../data/measures/rtx2070super/"    #sostituire con locazione desiderata
filename <- paste(fileLocation, "benchmark_", temp1, "_", temp2, ".txt", sep = "")
##lettura file
variables <- (var + 2*constraint) + 1
currentData <- read.csv(filename)
currentData <- subset(currentData, vars == variables & operation == "solve")
rtx2070super.means <- c(rtx2070super.means, mean(currentData$elapsed_time))
#altro
trueVarsPhaseOne <- c(trueVarsPhaseOne, variables)
}
}
names <- c("vars", "constraints", "trueVars", "values")
#creazione data frames
mx250.means <- data.frame(vars, constraints, trueVarsPhaseOne, mx250.means);
rtx2070super.means <- data.frame(vars, constraints, trueVarsPhaseOne, rtx2070super.means);
colnames(mx250.means) <- names;
colnames(rtx2070super.means) <- names;
mx250.means$cells <- mx250.means$constraints * mx250.means$trueVars
rtx2070super.means$cells <- rtx2070super.means$constraints * rtx2070super.means$trueVars
##inseriamo la linea di regressione
mx250.lm <- lm(data = mx250.means, values~cells)
rtx2070super.lm <- lm(data = rtx2070super.means, values~cells)
plot(data = mx250.means, values~cells, main = "Tempo medio per singolo ciclo di solve in fase 1", xlab = "numero di elementi del tableu", ylab = "Tempo per ciclo", col = "black")
points(data = rtx2070super.means, values~cells, col = "green")
abline(mx250.lm, col = "black")
abline(rtx2070super.lm, col = "green")
legend("topleft", c("MX250", "RTX2070 Super"), lty = c(1,1), col = c("black", "green"))
#salviamo per poter modificare
diff_mx250 <- mx250.means
diff_rtx2070super <- rtx2070super.means
cells <- mx250.means$cells
difference <- c()
ratio <- c()
for(cell in cells){
current_mx250 <- subset(diff_mx250, cells == cell)
current_rtx2070super <- subset(diff_rtx2070super, cells == cell)
##salviamo le differenze che ci servono a parte
if(cell == 196864){
difference_256x256 <- current_mx250$values - current_rtx2070super$values
ratio_256x256 <- current_mx250$values/current_rtx2070super$values
}
if(cell == 201334784){
difference_8192x8192 <- current_mx250$values - current_rtx2070super$values
ratio_8192x8192 <- current_mx250$values/current_rtx2070super$values
}
value <- current_mx250$times
difference <-  c(difference, current_mx250$values - current_rtx2070super$values)
ratio <- c(ratio, current_mx250$values/current_rtx2070super$values)
}
difference <- data.frame(cells, difference);
ratio <- data.frame(cells, ratio);
par(mfrow = c(1,1))
plot(data = difference, difference~cells  , col = "black", main = "Differenza di tempo medio per ciclo di solve tra mx250 e rtx2070_super")
lines(lowess( difference$cells, difference$difference), col = "green", lwd = .5)
plot(data = ratio, ratio~cells  , col = "black", main = "Rapporto tra tempo medio per ciclo di solve tra mx250 e rtx2070_super")
lines(lowess( ratio$cells, ratio$ratio, f = .85), col = "green", lwd = .5)
ratioFunction <- function(x){
((mx250.lm$coefficients[1] + mx250.lm$coefficients[2] * x)/
(rtx2070super.lm$coefficients[1] + rtx2070super.lm$coefficients[2] * x))
}
curve(ratioFunction, add = TRUE, col = "red")
legend("bottomright", c("Approx.", "Teorica"), lty = c(1,1), col = c("green", "red"))
par(mfrow = c(1,1))
##altrimenti non compila
difference_1024 <- 0
difference_8192 <- 0
rapporto_1024 <- 0
rapporto_8192 <- 0
# mx250_1024 <- read.csv("./../data/measures/mx250/mx250_1024.txt")
# mx250_8192 <- read.csv("./../data/measures/mx250/mx250_8192.txt")
# rtx3070_1024 <- read.csv("./../data/measures/rtx3070/rtx3070_1024.txt")
# rtx3070_8192 <- read.csv("./../data/measures/rtx3070/rtx3070_8192.txt")
#
# mx250_1024 <- subset(mx250_1024, vars == "3073" & operation == "solve")
# mx250_8192 <- subset(mx250_8192, vars == "24577" & operation == "solve")
# rtx3070_1024 <- subset(rtx3070_1024, vars == "3073" & operation == "solve")
# rtx3070_8192 <- subset(rtx3070_8192, vars == "24577" & operation == "solve")
#
# difference_1024 <- mean(mx250_1024$elapsed_time)-mean(rtx3070_1024$elapsed_time)
# difference_8192 <- mean(mx250_8192$elapsed_time)-mean(rtx3070_8192$elapsed_time)
# rapporto_1024 <- mean(mx250_1024$elapsed_time)/mean(rtx3070_1024$elapsed_time)
# rapporto_8192 <- mean(mx250_8192$elapsed_time)/mean(rtx3070_8192$elapsed_time)
#salviamo per poter modificare
diff_mx250 <- mx250.means
diff_rtx2070super <- rtx2070super.means
cells <- mx250.means$cells
difference <- c()
ratio <- c()
for(cell in cells){
current_mx250 <- subset(diff_mx250, cells == cell)
current_rtx2070super <- subset(diff_rtx2070super, cells == cell)
##salviamo le differenze che ci servono a parte
if(cell == 196864){
difference_256x256 <- current_mx250$values - current_rtx2070super$values
ratio_256x256 <- current_mx250$values/current_rtx2070super$values
}
if(cell == 201334784){
difference_8192x8192 <- current_mx250$values - current_rtx2070super$values
ratio_8192x8192 <- current_mx250$values/current_rtx2070super$values
}
value <- current_mx250$times
difference <-  c(difference, current_mx250$values - current_rtx2070super$values)
ratio <- c(ratio, current_mx250$values/current_rtx2070super$values)
}
difference <- data.frame(cells, difference);
ratio <- data.frame(cells, ratio);
par(mfrow = c(1,1))
plot(data = difference, difference~cells  , col = "black", main = "Differenza di tempo medio per ciclo di solve tra MX250 e RTX2070 Super")
lines(lowess( difference$cells, difference$difference), col = "green", lwd = .5)
plot(data = ratio, ratio~cells  , col = "black", main = "Rapporto tra tempo medio per ciclo di solve tra MX250 e RTX2070 Super")
lines(lowess( ratio$cells, ratio$ratio, f = .85), col = "green", lwd = .5)
ratioFunction <- function(x){
((mx250.lm$coefficients[1] + mx250.lm$coefficients[2] * x)/
(rtx2070super.lm$coefficients[1] + rtx2070super.lm$coefficients[2] * x))
}
curve(ratioFunction, add = TRUE, col = "red")
legend("bottomright", c("Approx.", "Teorica"), lty = c(1,1), col = c("green", "red"))
par(mfrow = c(1,1))
##altrimenti non compila
difference_1024 <- 0
difference_8192 <- 0
rapporto_1024 <- 0
rapporto_8192 <- 0
#salviamo per poter modificare
diff_mx250 <- mx250.means
diff_rtx2070super <- rtx2070super.means
cells <- mx250.means$cells
difference <- c()
ratio <- c()
for(cell in cells){
current_mx250 <- subset(diff_mx250, cells == cell)
current_rtx2070super <- subset(diff_rtx2070super, cells == cell)
##salviamo le differenze che ci servono a parte
if(cell == 196864){
difference_256x256 <- current_mx250$values - current_rtx2070super$values
ratio_256x256 <- current_mx250$values/current_rtx2070super$values
}
if(cell == 201334784){
difference_8192x8192 <- current_mx250$values - current_rtx2070super$values
ratio_8192x8192 <- current_mx250$values/current_rtx2070super$values
}
value <- current_mx250$times
difference <-  c(difference, current_mx250$values - current_rtx2070super$values)
ratio <- c(ratio, current_mx250$values/current_rtx2070super$values)
}
difference <- data.frame(cells, difference);
ratio <- data.frame(cells, ratio);
par(mfrow = c(1,1))
plot(data = difference, difference~cells  , col = "black", main = "Differenza di tempo medio per ciclo di solve tra MX250 e RTX2070 Super")
lines(lowess( difference$cells, difference$difference), col = "green", lwd = .5)
plot(data = ratio, ratio~cells  , col = "black", main = "Rapporto tra tempo medio per ciclo di solve tra MX250 e RTX2070 Super")
lines(lowess( ratio$cells, ratio$ratio, f = .85), col = "green", lwd = .5)
ratioFunction <- function(x){
((mx250.lm$coefficients[1] + mx250.lm$coefficients[2] * x)/
(rtx2070super.lm$coefficients[1] + rtx2070super.lm$coefficients[2] * x))
}
curve(ratioFunction, add = TRUE, col = "red")
legend("bottomright", c("Approx.", "Teorica"), lty = c(1,1), col = c("green", "red"))
par(mfrow = c(1,1))
##altrimenti non compila
#difference_1024 <- 0
#difference_8192 <- 0
#rapporto_1024 <- 0
#rapporto_8192 <- 0
mx250_256 <- read.csv("./../data/measures/mx250_2/benchmark_256_256.txt")
mx250_512 <- read.csv("./../data/measures/mx250_2/benchmark_512_512.txt")
mx250_1024 <- read.csv("./../data/measures/mx250_2/benchmark_1024_1024.txt")
mx250_2048 <- read.csv("./../data/measures/mx250_2/benchmark_2048_2048.txt")
mx250_4096 <- read.csv("./../data/measures/mx250_2/benchmark_4096_4096.txt")
mx250_8192 <- read.csv("./../data/measures/mx250_2/benchmark_8192_8192.txt")
rtx2070super_256 <- read.csv("./../data/measures/rtx2070super/benchmark_256_256.txt")
rtx2070super_512 <- read.csv("./../data/measures/rtx2070super/benchmark_512_512.txt")
rtx2070super_1024 <- read.csv("./../data/measures/rtx2070super/benchmark_1024_1024.txt")
rtx2070super_2048 <- read.csv("./../data/measures/rtx2070super/benchmark_2048_2048.txt")
rtx2070super_4096 <- read.csv("./../data/measures/rtx2070super/benchmark_4096_4096.txt")
rtx2070super_8192 <- read.csv("./../data/measures/rtx2070super/benchmark_8192_8192.txt")
times_mx250_256 <- subset(mx250_256, vars == "769" & operation == "solve")
times_mx250_512 <- subset(mx250_512, vars == "1537" & operation == "solve")
times_mx250_1024 <- subset(mx250_1024, vars == "3073" & operation == "solve")
times_mx250_2048 <- subset(mx250_2048, vars == "6145" & operation == "solve")
times_mx250_4096 <- subset(mx250_4096, vars == "12289" & operation == "solve")
times_mx250_8192 <- subset(mx250_8192, vars == "24577" & operation == "solve")
times_rtx2070super_256 <- subset(rtx2070super_256, vars == "769" & operation == "solve")
times_rtx2070super_512 <- subset(rtx2070super_512, vars == "1537" & operation == "solve")
times_rtx2070super_1024 <- subset(rtx2070super_1024, vars == "3073" & operation == "solve")
times_rtx2070super_2048 <- subset(rtx2070super_2048, vars == "6145" & operation == "solve")
times_rtx2070super_4096 <- subset(rtx2070super_4096, vars == "12289" & operation == "solve")
times_rtx2070super_8192 <- subset(rtx2070super_8192, vars == "24577" & operation == "solve")
par(mfrow=c(3,2))
############ 256 ##########
dta_A <- density(times_mx250_256$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_256$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 256x256", xlim = c(0,1500), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
legend("topright", c("mx250", "rtx 2070 super"), lty = c(1,1), col = c("black", "green"))
############ 512 ##########
dta_A <- density(times_mx250_512$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_512$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 512x512", xlim = c(0,2000), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
legend("topright", c("mx250", "rtx 2070 super"), lty = c(1,1), col = c("black", "green"))
############ 1024 ##########
dta_A <- density(times_mx250_1024$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_1024$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 1024x1024", xlim = c(0,6000), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
legend("topright", c("mx250", "rtx 2070 super"), lty = c(1,1), col = c("black", "green"))
############ 2048 ##########
dta_A <- density(times_mx250_2048$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_2048$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 2048x2048", xlim = c(0,18000), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
legend("topright", c("mx250", "rtx 2070 super"), lty = c(1,1), col = c("black", "green"))
############ 4096 ##########
dta_A <- density(times_mx250_4096$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_4096$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 4096x4096", xlim = c(0,75000), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
legend("topright", c("mx250", "rtx 2070 super"), lty = c(1,1), col = c("black", "green"))
########### 8192 ###########
dta_A <- density(times_mx250_8192$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_8192$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 8192x8192", xlim = c(0,350000), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
legend("topright", c("mx250", "rtx 2070 super"), lty = c(1,1), col = c("black", "green"))
par(mfrow=c(1,1))
mx250_256 <- read.csv("./../data/measures/mx250_2/benchmark_256_256.txt")
mx250_512 <- read.csv("./../data/measures/mx250_2/benchmark_512_512.txt")
mx250_1024 <- read.csv("./../data/measures/mx250_2/benchmark_1024_1024.txt")
mx250_2048 <- read.csv("./../data/measures/mx250_2/benchmark_2048_2048.txt")
mx250_4096 <- read.csv("./../data/measures/mx250_2/benchmark_4096_4096.txt")
mx250_8192 <- read.csv("./../data/measures/mx250_2/benchmark_8192_8192.txt")
rtx2070super_256 <- read.csv("./../data/measures/rtx2070super/benchmark_256_256.txt")
rtx2070super_512 <- read.csv("./../data/measures/rtx2070super/benchmark_512_512.txt")
rtx2070super_1024 <- read.csv("./../data/measures/rtx2070super/benchmark_1024_1024.txt")
rtx2070super_2048 <- read.csv("./../data/measures/rtx2070super/benchmark_2048_2048.txt")
rtx2070super_4096 <- read.csv("./../data/measures/rtx2070super/benchmark_4096_4096.txt")
rtx2070super_8192 <- read.csv("./../data/measures/rtx2070super/benchmark_8192_8192.txt")
times_mx250_256 <- subset(mx250_256, vars == "769" & operation == "solve")
times_mx250_512 <- subset(mx250_512, vars == "1537" & operation == "solve")
times_mx250_1024 <- subset(mx250_1024, vars == "3073" & operation == "solve")
times_mx250_2048 <- subset(mx250_2048, vars == "6145" & operation == "solve")
times_mx250_4096 <- subset(mx250_4096, vars == "12289" & operation == "solve")
times_mx250_8192 <- subset(mx250_8192, vars == "24577" & operation == "solve")
times_rtx2070super_256 <- subset(rtx2070super_256, vars == "769" & operation == "solve")
times_rtx2070super_512 <- subset(rtx2070super_512, vars == "1537" & operation == "solve")
times_rtx2070super_1024 <- subset(rtx2070super_1024, vars == "3073" & operation == "solve")
times_rtx2070super_2048 <- subset(rtx2070super_2048, vars == "6145" & operation == "solve")
times_rtx2070super_4096 <- subset(rtx2070super_4096, vars == "12289" & operation == "solve")
times_rtx2070super_8192 <- subset(rtx2070super_8192, vars == "24577" & operation == "solve")
par(mfrow=c(2,3))
############ 256 ##########
dta_A <- density(times_mx250_256$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_256$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 256x256", xlim = c(0,1500), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
############ 512 ##########
dta_A <- density(times_mx250_512$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_512$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 512x512", xlim = c(0,2000), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
############ 1024 ##########
dta_A <- density(times_mx250_1024$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_1024$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 1024x1024", xlim = c(0,6000), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
############ 2048 ##########
dta_A <- density(times_mx250_2048$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_2048$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 2048x2048", xlim = c(0,18000), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
############ 4096 ##########
dta_A <- density(times_mx250_4096$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_4096$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 4096x4096", xlim = c(0,75000), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
########### 8192 ###########
dta_A <- density(times_mx250_8192$elapsed_time, na.rm = TRUE)
dta_B <- density(times_rtx2070super_8192$elapsed_time, na.rm = TRUE)
plot(dta_A, col = "black", main = "Matrice 8192x8192", xlim = c(0,350000), ylim = c(0, max(dta_A$y, dta_B$y)))
lines(dta_B, col = "green")
par(mfrow=c(1,1))
plot(1, type="n", axes = FALSE, xlab="", ylab="")
legend("top", c("mx250", "rtx 2070 super"), lty = c(1,1), col = c("black", "green"), inset = 0, horiz = TRUE, cex = .5)
